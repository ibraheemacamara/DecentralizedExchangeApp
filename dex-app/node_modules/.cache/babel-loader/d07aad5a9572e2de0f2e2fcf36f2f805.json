{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/ibrahimacamara/Projects/Blockchain/DecentralizedExchange/dex-app/src/services/Account.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport provider from '../services/provider';\nimport CheckBalance from './CheckBalance';\nimport EthereumConnexion from './EthereumConnexion';\n\nfunction Account() {\n  _s();\n\n  const [accounts, setAccounts] = useState([]);\n  const [selectedAccount, setSelectedAccount] = useState();\n  const [balance, setBalance] = useState();\n  useEffect(() => {\n    provider.listAccounts().then(function (result) {\n      console.log(result);\n      setAccounts(result);\n      console.log(selectedAccount);\n    }).catch(function (error) {\n      console.log(error);\n    });\n    setSelectedAccount(0);\n    CheckBalance();\n  }, []);\n\n  function handleChange(event) {\n    console.log(\"Account choisi: \" + event.target.value);\n    setSelectedAccount(event.target.value);\n    return CheckBalance();\n  }\n\n  ;\n\n  function CheckBalance() {\n    console.log(\"Checking balance of account: \" + accounts[selectedAccount]);\n    console.log(selectedAccount);\n    EthereumConnexion.CreateInstances();\n    const tokenInstance = EthereumConnexion.GetInstance();\n    tokenInstance.balanceOf(accounts[selectedAccount]).then(function (result) {\n      console.log(\"Received: \" + result);\n      const balance = parseFloat(result.toString()) / 10 ** 18;\n      console.log(balance);\n      setBalance(balance);\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Accounts:\", /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedAccount,\n        onChange: handleChange,\n        children: accounts.map(account => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: accounts.indexOf(account),\n          children: account\n        }, accounts.indexOf(account).toString(), false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"My Balance: \", balance, \" IKC\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Account, \"5oXcfr5MDld/NDQbOc5QqcZIprQ=\");\n\n_c = Account;\n;\nexport default Account;\n\nvar _c;\n\n$RefreshReg$(_c, \"Account\");","map":{"version":3,"sources":["/Users/ibrahimacamara/Projects/Blockchain/DecentralizedExchange/dex-app/src/services/Account.js"],"names":["React","useState","useEffect","provider","CheckBalance","EthereumConnexion","Account","accounts","setAccounts","selectedAccount","setSelectedAccount","balance","setBalance","listAccounts","then","result","console","log","catch","error","handleChange","event","target","value","CreateInstances","tokenInstance","GetInstance","balanceOf","parseFloat","toString","map","account","indexOf"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;;AAEA,SAASC,OAAT,GAAmB;AAAA;;AAEf,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACQ,eAAD,EAAkBC,kBAAlB,IAAwCT,QAAQ,EAAtD;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,EAAtC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZC,IAAAA,QAAQ,CAACU,YAAT,GAAwBC,IAAxB,CAA6B,UAAUC,MAAV,EAAkB;AAC3CC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACAP,MAAAA,WAAW,CAACO,MAAD,CAAX;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYR,eAAZ;AACH,KAJD,EAIGS,KAJH,CAIS,UAAUC,KAAV,EAAiB;AACtBH,MAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACH,KAND;AAOAT,IAAAA,kBAAkB,CAAC,CAAD,CAAlB;AACAN,IAAAA,YAAY;AACf,GAVQ,EAUN,EAVM,CAAT;;AAYA,WAASgB,YAAT,CAAsBC,KAAtB,EAA4B;AAExBL,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAmBI,KAAK,CAACC,MAAN,CAAaC,KAA5C;AAEAb,IAAAA,kBAAkB,CAACW,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAlB;AAEA,WAAOnB,YAAY,EAAnB;AACH;;AAAA;;AAED,WAASA,YAAT,GAAuB;AAEnBY,IAAAA,OAAO,CAACC,GAAR,CAAY,kCAAkCV,QAAQ,CAACE,eAAD,CAAtD;AAEAO,IAAAA,OAAO,CAACC,GAAR,CAAYR,eAAZ;AAEAJ,IAAAA,iBAAiB,CAACmB,eAAlB;AACA,UAAMC,aAAa,GAAGpB,iBAAiB,CAACqB,WAAlB,EAAtB;AAEAD,IAAAA,aAAa,CAACE,SAAd,CAAwBpB,QAAQ,CAACE,eAAD,CAAhC,EAAmDK,IAAnD,CAAwD,UAAUC,MAAV,EAAkB;AACtEC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAeF,MAA3B;AACA,YAAMJ,OAAO,GAAGiB,UAAU,CAACb,MAAM,CAACc,QAAP,EAAD,CAAV,GAAgC,MAAM,EAAtD;AACAb,MAAAA,OAAO,CAACC,GAAR,CAAYN,OAAZ;AACAC,MAAAA,UAAU,CAACD,OAAD,CAAV;AACH,KALD,EAKGO,KALH,CAKS,UAAUC,KAAV,EAAiB;AACtBH,MAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACH,KAPD;AAQH;;AAAA;AAED,sBACI;AAAA,4BACI;AAAA,2CAEI;AAAS,QAAA,KAAK,EAAEV,eAAhB;AAAiC,QAAA,QAAQ,EAAEW,YAA3C;AAAA,kBACKb,QAAQ,CAACuB,GAAT,CAAcC,OAAD,iBACV;AAAmD,UAAA,KAAK,EAAExB,QAAQ,CAACyB,OAAT,CAAiBD,OAAjB,CAA1D;AAAA,oBAAsFA;AAAtF,WAAaxB,QAAQ,CAACyB,OAAT,CAAiBD,OAAjB,EAA0BF,QAA1B,EAAb;AAAA;AAAA;AAAA;AAAA,gBADH;AADL;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eASI;AAAA,iCAAgBlB,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA,YATJ;AAAA,kBADJ;AAaH;;GA3DQL,O;;KAAAA,O;AA2DR;AAED,eAAeA,OAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport provider from '../services/provider';\nimport CheckBalance from './CheckBalance';\nimport EthereumConnexion from './EthereumConnexion';\n\nfunction Account() {\n\n    const [accounts, setAccounts] = useState([]);\n    const [selectedAccount, setSelectedAccount] = useState();\n    const [balance, setBalance] = useState();\n\n    useEffect(() => {\n        provider.listAccounts().then(function (result) {\n            console.log(result);\n            setAccounts(result);\n            console.log(selectedAccount);\n        }).catch(function (error) {\n            console.log(error);\n        });\n        setSelectedAccount(0);\n        CheckBalance();\n    }, []);\n\n    function handleChange(event){\n\n        console.log(\"Account choisi: \"+event.target.value)\n\n        setSelectedAccount(event.target.value);\n\n        return CheckBalance();\n    };\n\n    function CheckBalance(){\n\n        console.log(\"Checking balance of account: \" + accounts[selectedAccount]);\n\n        console.log(selectedAccount);\n\n        EthereumConnexion.CreateInstances();\n        const tokenInstance = EthereumConnexion.GetInstance();\n\n        tokenInstance.balanceOf(accounts[selectedAccount]).then(function (result) {\n            console.log(\"Received: \" + result);\n            const balance = parseFloat(result.toString()) / 10 ** 18;\n            console.log(balance);\n            setBalance(balance);\n        }).catch(function (error) {\n            console.log(error);\n        });\n    };\n\n    return (\n        <>\n            <label>\n                Accounts: \n                <select  value={selectedAccount} onChange={handleChange}>\n                    {accounts.map((account) => (\n                        <option key={accounts.indexOf(account).toString()} value={accounts.indexOf(account)}>{account}</option>\n                    ))}\n                </select>\n            </label>\n            <p>My Balance: {balance} IKC</p>\n        </>\n    );\n};\n\nexport default Account;"]},"metadata":{},"sourceType":"module"}