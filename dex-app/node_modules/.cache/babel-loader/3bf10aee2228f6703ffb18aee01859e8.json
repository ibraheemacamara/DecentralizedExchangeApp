{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/ibrahimacamara/Projects/Blockchain/DecentralizedExchange/dex-app/src/services/Account.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport provider from '../services/provider';\nimport CheckBalance from './CheckBalance';\n\nfunction Account() {\n  _s();\n\n  const [accounts, setAccounts] = useState([]);\n  const [selectedAccount, setSelectedAccount] = useState('');\n  useEffect(() => {\n    provider.listAccounts().then(function (result) {\n      console.log(result);\n      setAccounts(result);\n      setSelectedAccount(0);\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }, []);\n\n  function handleChange(event) {\n    setSelectedAccount(event.target.value);\n    refreshCheckBalance();\n  }\n\n  ;\n\n  function refreshCheckBalance() {\n    CheckBalance.setState({});\n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Accounts:\", /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedAccount,\n        onChange: handleChange,\n        children: accounts.map(account => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: accounts.indexOf(account),\n          children: account\n        }, accounts.indexOf(account).toString(), false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CheckBalance, {\n      account: accounts[selectedAccount]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Account, \"Zu+SzxmNEJJM7Zcah/fH6t6B7z4=\");\n\n_c = Account;\n;\nexport default Account;\n\nvar _c;\n\n$RefreshReg$(_c, \"Account\");","map":{"version":3,"sources":["/Users/ibrahimacamara/Projects/Blockchain/DecentralizedExchange/dex-app/src/services/Account.js"],"names":["React","useState","useEffect","provider","CheckBalance","Account","accounts","setAccounts","selectedAccount","setSelectedAccount","listAccounts","then","result","console","log","catch","error","handleChange","event","target","value","refreshCheckBalance","setState","map","account","indexOf","toString"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;AAEA,SAASC,OAAT,GAAmB;AAAA;;AAEf,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACO,eAAD,EAAkBC,kBAAlB,IAAwCR,QAAQ,CAAC,EAAD,CAAtD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZC,IAAAA,QAAQ,CAACO,YAAT,GAAwBC,IAAxB,CAA6B,UAAUC,MAAV,EAAkB;AAC3CC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACAL,MAAAA,WAAW,CAACK,MAAD,CAAX;AACAH,MAAAA,kBAAkB,CAAC,CAAD,CAAlB;AACH,KAJD,EAIGM,KAJH,CAIS,UAAUC,KAAV,EAAiB;AACtBH,MAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACH,KAND;AAOH,GARQ,EAQN,EARM,CAAT;;AAUA,WAASC,YAAT,CAAsBC,KAAtB,EAA4B;AACxBT,IAAAA,kBAAkB,CAACS,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAlB;AAEAC,IAAAA,mBAAmB;AACtB;;AAAA;;AAED,WAASA,mBAAT,GAA8B;AAC1BjB,IAAAA,YAAY,CAACkB,QAAb,CAAsB,EAAtB;AACH;;AAAA;AAED,sBACI;AAAA,4BACI;AAAA,2CAEI;AAAS,QAAA,KAAK,EAAEd,eAAhB;AAAiC,QAAA,QAAQ,EAAES,YAA3C;AAAA,kBACKX,QAAQ,CAACiB,GAAT,CAAcC,OAAD,iBACV;AAAmD,UAAA,KAAK,EAAElB,QAAQ,CAACmB,OAAT,CAAiBD,OAAjB,CAA1D;AAAA,oBAAsFA;AAAtF,WAAalB,QAAQ,CAACmB,OAAT,CAAiBD,OAAjB,EAA0BE,QAA1B,EAAb;AAAA;AAAA;AAAA;AAAA,gBADH;AADL;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eASI,QAAC,YAAD;AAAc,MAAA,OAAO,EAAEpB,QAAQ,CAACE,eAAD;AAA/B;AAAA;AAAA;AAAA;AAAA,YATJ;AAAA,kBADJ;AAaH;;GAtCQH,O;;KAAAA,O;AAsCR;AAED,eAAeA,OAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport provider from '../services/provider';\nimport CheckBalance from './CheckBalance';\n\nfunction Account() {\n\n    const [accounts, setAccounts] = useState([]);\n    const [selectedAccount, setSelectedAccount] = useState('');\n\n    useEffect(() => {\n        provider.listAccounts().then(function (result) {\n            console.log(result);\n            setAccounts(result);\n            setSelectedAccount(0);\n        }).catch(function (error) {\n            console.log(error);\n        });\n    }, []);\n\n    function handleChange(event){\n        setSelectedAccount(event.target.value);\n\n        refreshCheckBalance();\n    };\n\n    function refreshCheckBalance(){\n        CheckBalance.setState({});\n    };\n\n    return (\n        <>\n            <label>\n                Accounts: \n                <select  value={selectedAccount} onChange={handleChange}>\n                    {accounts.map((account) => (\n                        <option key={accounts.indexOf(account).toString()} value={accounts.indexOf(account)}>{account}</option>\n                    ))}\n                </select>\n            </label>\n            <CheckBalance account={accounts[selectedAccount]}></CheckBalance>\n        </>\n    );\n};\n\nexport default Account;"]},"metadata":{},"sourceType":"module"}