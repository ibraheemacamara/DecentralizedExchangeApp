{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/ibrahimacamara/Projects/Blockchain/DecentralizedExchange/dex-app/src/services/Transfer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport { ethers } from \"ethers\";\nimport provider from '../services/provider';\nimport EthereumConnexion from '../services/EthereumConnexion';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction Transfer() {\n  _s();\n\n  const [accounts, setAccounts] = useState([]);\n  const [selectedAccount, setSelectedAccount] = useState('');\n  const [amount, setAmount] = useState(0);\n  useEffect(() => {\n    provider.listAccounts().then(function (result) {\n      console.log(result);\n      setAccounts(result);\n      setSelectedAccount(accounts[0]);\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }, []);\n\n  function handleChange(event) {\n    setSelectedAccount(event.target.value);\n  }\n\n  ;\n\n  function handleAmount(event) {\n    setAmount(event.target.value);\n  }\n\n  ;\n\n  function handleSubmit(event) {\n    event.preventDefault();\n\n    if (parseFloat(amount) <= 0) {\n      window.alert(\"Amount is not corect!\");\n      return;\n    }\n\n    const amountToTransfer = ethers.utils.parseEther(amount); // * (10 ** 18); \n\n    console.log(amountToTransfer);\n    console.log(\"Request tranfer. To: \" + accounts[selectedAccount] + \", Amount: \" + amount);\n    const to = accounts[selectedAccount];\n    EthereumConnexion.CreateInstances();\n    const insanceWithSigner = EthereumConnexion.GetInsanceWithSigner();\n    console.log(insanceWithSigner);\n    insanceWithSigner.transfer(to, amountToTransfer).then(function (result) {\n      console.log(\"Transfer succeded!\" + result);\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Send Tokens\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"To Address:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedAccount,\n          onChange: handleChange,\n          children: accounts.map(account => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: accounts.indexOf(account),\n            children: account\n          }, accounts.indexOf(account).toString(), false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Amount:\", /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"number\",\n          value: amount,\n          onChange: handleAmount\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"IKC\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 89\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"center\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          type: \"submit\",\n          children: \"Transfer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Transfer, \"5Ubn+bLPT98/j4CqtP1hxH6DZk4=\");\n\n_c = Transfer;\n;\nexport default Transfer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Transfer\");","map":{"version":3,"sources":["/Users/ibrahimacamara/Projects/Blockchain/DecentralizedExchange/dex-app/src/services/Transfer.js"],"names":["React","useState","useEffect","Form","Button","ethers","provider","EthereumConnexion","Transfer","accounts","setAccounts","selectedAccount","setSelectedAccount","amount","setAmount","listAccounts","then","result","console","log","catch","error","handleChange","event","target","value","handleAmount","handleSubmit","preventDefault","parseFloat","window","alert","amountToTransfer","utils","parseEther","to","CreateInstances","insanceWithSigner","GetInsanceWithSigner","transfer","map","account","indexOf","toString"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport { ethers } from \"ethers\";\nimport provider from '../services/provider';\nimport EthereumConnexion from '../services/EthereumConnexion';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction Transfer() {\n\n    const [accounts, setAccounts] = useState([]);\n    const [selectedAccount, setSelectedAccount] = useState('');\n    const [amount, setAmount] = useState(0);\n\n    useEffect(() => {\n        provider.listAccounts().then(function (result) {\n            console.log(result);\n            setAccounts(result);\n            setSelectedAccount(accounts[0]);\n        }).catch(function (error) {\n            console.log(error);\n        });\n    }, []);\n\n    function handleChange(event){\n        setSelectedAccount(event.target.value);\n    };\n\n    function handleAmount(event){\n        setAmount(event.target.value);\n    };\n\n    function handleSubmit(event){\n\n        event.preventDefault();\n\n        if(parseFloat(amount) <= 0){\n            window.alert(\"Amount is not corect!\")\n            return;\n        }\n\n        const amountToTransfer = ethers.utils.parseEther(amount);// * (10 ** 18); \n        console.log(amountToTransfer);\n\n        console.log(\"Request tranfer. To: \"+accounts[selectedAccount]+\", Amount: \"+amount);\n\n        const to = accounts[selectedAccount];\n\n        EthereumConnexion.CreateInstances();\n        const insanceWithSigner = EthereumConnexion.GetInsanceWithSigner();\n\n        console.log(insanceWithSigner);\n\n        insanceWithSigner.transfer(to, amountToTransfer)\n                          .then(function(result){\n                              console.log(\"Transfer succeded!\" + result);\n                          }).catch(function(error){\n                              console.log(error);\n                          });\n        \n    };\n    return (\n        <Form onSubmit={handleSubmit}>\n            <div className=\"center\">\n                <h3>Send Tokens</h3>\n            </div>\n            <Form.Group>\n                <label>\n                    To Address: \n                    <select  value={selectedAccount} onChange={handleChange}>\n                        {accounts.map((account) => (\n                            <option key={accounts.indexOf(account).toString()} value={accounts.indexOf(account)}>{account}</option>\n                        ))}\n                    </select>\n                </label>\n                <label>\n                    Amount: \n                    <Form.Control type=\"number\" value={amount} onChange={handleAmount}/><label>IKC</label>\n                </label>\n            </Form.Group>\n            <Form.Group>\n                <div className=\"center\">\n                    <Button variant=\"primary\" type=\"submit\">\n                        Transfer\n                    </Button>\n                </div>\n            </Form.Group>\n        </Form>\n    );\n};\n\nexport default Transfer;"]},"metadata":{},"sourceType":"module"}