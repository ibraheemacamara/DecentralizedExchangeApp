{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/ibrahimacamara/Projects/Blockchain/DecentralizedExchange/dex-app/src/services/Account.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport provider from '../services/provider';\nimport CheckBalance from './CheckBalance';\nimport EthereumConnexion from './EthereumConnexion';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../App.css';\n\nfunction Account() {\n  _s();\n\n  const [accounts, setAccounts] = useState([]); //const [selectedAccount, setSelectedAccount] = useState();\n\n  const [balance, setBalance] = useState(1000);\n  let selectedAccount;\n  useEffect(() => {\n    provider.listAccounts().then(function (result) {\n      console.log(result);\n      setAccounts(result);\n      console.log(selectedAccount);\n    }).catch(function (error) {\n      console.log(error);\n    });\n    selectedAccount = 0;\n    setBalance(1000);\n  }, []);\n\n  function handleChange(event) {\n    selectedAccount = event.target.value;\n    return CheckBalance();\n  }\n\n  ;\n\n  function CheckBalance() {\n    console.log(\"Checking balance of account: \" + accounts[selectedAccount]);\n    console.log(selectedAccount);\n    EthereumConnexion.CreateInstances();\n    const tokenInstance = EthereumConnexion.GetInstance();\n    tokenInstance.balanceOf(accounts[selectedAccount]).then(function (result) {\n      console.log(\"Received: \" + result);\n      const res = parseFloat(result.toString()) / 10 ** 18;\n      console.log(res);\n      setBalance(res);\n      console.log(\"After set balance: \" + balance);\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(Form, {\n    children: /*#__PURE__*/_jsxDEV(Form.Row, {\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"account\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Select an account: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          as: \"select\",\n          value: selectedAccount,\n          onChange: handleChange,\n          children: accounts.map(account => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: accounts.indexOf(account),\n            children: account\n          }, accounts.indexOf(account).toString(), false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"account\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Current account's balance:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          plaintext: true,\n          readOnly: true,\n          defaultValue: balance + \" IKC\",\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Account, \"bITBsgmO2nxvNjWcFRbqa+PEvwg=\");\n\n_c = Account;\n;\nexport default Account;\n\nvar _c;\n\n$RefreshReg$(_c, \"Account\");","map":{"version":3,"sources":["/Users/ibrahimacamara/Projects/Blockchain/DecentralizedExchange/dex-app/src/services/Account.js"],"names":["React","useState","useEffect","Form","provider","CheckBalance","EthereumConnexion","Account","accounts","setAccounts","balance","setBalance","selectedAccount","listAccounts","then","result","console","log","catch","error","handleChange","event","target","value","CreateInstances","tokenInstance","GetInstance","balanceOf","res","parseFloat","toString","map","account","indexOf"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport provider from '../services/provider';\nimport CheckBalance from './CheckBalance';\nimport EthereumConnexion from './EthereumConnexion';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../App.css';\n\nfunction Account() {\n\n    const [accounts, setAccounts] = useState([]);\n    //const [selectedAccount, setSelectedAccount] = useState();\n    const [balance, setBalance] = useState(1000);\n\n    let selectedAccount;\n\n    useEffect(() => {\n        provider.listAccounts().then(function (result) {\n            console.log(result);\n            setAccounts(result);\n            console.log(selectedAccount);\n        }).catch(function (error) {\n            console.log(error);\n        });\n        selectedAccount = 0;\n        setBalance(1000);\n    }, []);\n\n    function handleChange(event) {\n\n        selectedAccount = event.target.value;\n\n        return CheckBalance();\n    };\n\n    function CheckBalance() {\n\n        console.log(\"Checking balance of account: \" + accounts[selectedAccount]);\n\n        console.log(selectedAccount);\n\n        EthereumConnexion.CreateInstances();\n        const tokenInstance = EthereumConnexion.GetInstance();\n\n        tokenInstance.balanceOf(accounts[selectedAccount]).then(function (result) {\n            console.log(\"Received: \" + result);\n            const res = parseFloat(result.toString()) / 10 ** 18;\n            console.log(res);\n            setBalance(res);\n            console.log(\"After set balance: \"+balance)\n        }).catch(function (error) {\n            console.log(error);\n        });\n    };\n\n    return (\n        <Form>\n            <Form.Row>\n                <Form.Group className=\"account\">\n                    <Form.Label>Select an account: </Form.Label>\n                    <Form.Control as=\"select\" value={selectedAccount} onChange={handleChange}>\n                        {accounts.map((account) => (\n                            <option key={accounts.indexOf(account).toString()} value={accounts.indexOf(account)}>{account}</option>\n                        ))}\n                    </Form.Control>\n                </Form.Group>\n                <Form.Group className=\"account\">\n                    <Form.Label>Current account's balance:</Form.Label>\n                    <Form.Control plaintext readOnly defaultValue={balance+\" IKC\"} readOnly/>\n                </Form.Group>\n            </Form.Row>\n        </Form>\n    );\n};\n\nexport default Account;"]},"metadata":{},"sourceType":"module"}