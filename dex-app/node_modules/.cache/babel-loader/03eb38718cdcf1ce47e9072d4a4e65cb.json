{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/ibrahimacamara/Projects/Blockchain/DecentralizedExchange/dex-app/src/services/Account.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport provider from '../services/provider';\nimport CheckBalance from './CheckBalance';\n\nfunction Account() {\n  _s();\n\n  const [accounts, setAccounts] = useState([]);\n  let selectedAccount;\n  useEffect(() => {\n    provider.listAccounts().then(function (result) {\n      console.log(result);\n      setAccounts(result);\n      selectedAccount = accounts[0];\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }, []);\n\n  function handleChange(value) {\n    selectedAccount = value;\n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: [/*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"Accounts: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedAccount,\n        onChange: handleChange,\n        children: accounts.map(account => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: account,\n          children: account\n        }, accounts.indexOf(account), false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CheckBalance, {\n      account: selectedAccounts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Account, \"5m1axUzq0nW9J3umrT2fIaaNwOQ=\");\n\n_c = Account;\n;\nexport default Account;\n\nvar _c;\n\n$RefreshReg$(_c, \"Account\");","map":{"version":3,"sources":["/Users/ibrahimacamara/Projects/Blockchain/DecentralizedExchange/dex-app/src/services/Account.js"],"names":["React","useState","useEffect","provider","CheckBalance","Account","accounts","setAccounts","selectedAccount","listAccounts","then","result","console","log","catch","error","handleChange","value","map","account","indexOf","selectedAccounts"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;AAEA,SAASC,OAAT,GAAmB;AAAA;;AAEf,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,EAAD,CAAxC;AACA,MAAIO,eAAJ;AAEAN,EAAAA,SAAS,CAAC,MAAM;AACZC,IAAAA,QAAQ,CAACM,YAAT,GAAwBC,IAAxB,CAA6B,UAAUC,MAAV,EAAkB;AAC3CC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACAJ,MAAAA,WAAW,CAACI,MAAD,CAAX;AACAH,MAAAA,eAAe,GAAGF,QAAQ,CAAC,CAAD,CAA1B;AACH,KAJD,EAIGQ,KAJH,CAIS,UAAUC,KAAV,EAAiB;AACtBH,MAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACH,KAND;AAOH,GARQ,EAQN,EARM,CAAT;;AAUA,WAASC,YAAT,CAAsBC,KAAtB,EAA4B;AACxBT,IAAAA,eAAe,GAAGS,KAAlB;AACH;;AAAA;AAED,sBACI;AAAA,4BACI;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAS,QAAA,KAAK,EAAET,eAAhB;AAAiC,QAAA,QAAQ,EAAEQ,YAA3C;AAAA,kBACKV,QAAQ,CAACY,GAAT,CAAcC,OAAD,iBACV;AAAwC,UAAA,KAAK,EAAEA,OAA/C;AAAA,oBAAyDA;AAAzD,WAAab,QAAQ,CAACc,OAAT,CAAiBD,OAAjB,CAAb;AAAA;AAAA;AAAA;AAAA,gBADH;AADL;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eASI,QAAC,YAAD;AAAc,MAAA,OAAO,EAAEE;AAAvB;AAAA;AAAA;AAAA;AAAA,YATJ;AAAA,kBADJ;AAaH;;GAhCQhB,O;;KAAAA,O;AAgCR;AAED,eAAeA,OAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport provider from '../services/provider';\nimport CheckBalance from './CheckBalance';\n\nfunction Account() {\n\n    const [accounts, setAccounts] = useState([]);\n    let selectedAccount;\n\n    useEffect(() => {\n        provider.listAccounts().then(function (result) {\n            console.log(result);\n            setAccounts(result);\n            selectedAccount = accounts[0];\n        }).catch(function (error) {\n            console.log(error);\n        });\n    }, []);\n\n    function handleChange(value){\n        selectedAccount = value;\n    };\n\n    return (\n        <>\n            <label>\n                <b>Accounts: </b>\n                <select  value={selectedAccount} onChange={handleChange}>\n                    {accounts.map((account) => (\n                        <option key={accounts.indexOf(account)} value={account}>{account}</option>\n                    ))}\n                </select>\n            </label>\n            <CheckBalance account={selectedAccounts}></CheckBalance>\n        </>\n    );\n};\n\nexport default Account;"]},"metadata":{},"sourceType":"module"}