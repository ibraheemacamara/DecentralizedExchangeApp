{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/ibrahimacamara/Projects/Blockchain/DecentralizedExchange/dex-app/src/services/Transfer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport { ethers } from \"ethers\";\nimport provider from '../services/provider';\nimport EthereumConnexion from '../services/EthereumConnexion';\nimport AlertFailed from './AlertFailed';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../App.css';\n\nfunction Transfer() {\n  _s();\n\n  const [accounts, setAccounts] = useState([]);\n  const [selectedAccount, setSelectedAccount] = useState('');\n  const [amount, setAmount] = useState(0);\n  const [alertProps, setAlertProps] = useState({});\n  useEffect(() => {\n    provider.listAccounts().then(function (result) {\n      console.log(result);\n      setAccounts(result);\n      setSelectedAccount(accounts[0]);\n      setAlertProps(prevState => ({\n        alertProps: {\n          show: false,\n          ...prevState.field\n        }\n      }));\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }, []);\n\n  function handleChange(event) {\n    setSelectedAccount(event.target.value);\n  }\n\n  ;\n\n  function handleAmount(event) {\n    setAmount(event.target.value);\n  }\n\n  ;\n\n  function handleSubmit(event) {\n    event.preventDefault(); // if (parseFloat(amount) <= 0) {\n    //     window.alert(\"Amount is not corect!\")\n    //     return;\n    // }\n\n    const amountToTransfer = ethers.utils.parseEther(amount); // * (10 ** 18); \n\n    console.log(amountToTransfer);\n    console.log(\"Request tranfer. To: \" + accounts[selectedAccount] + \", Amount: \" + amount);\n    const to = accounts[selectedAccount];\n    EthereumConnexion.CreateInstances();\n    const insanceWithSigner = EthereumConnexion.GetInsanceWithSigner();\n    console.log(insanceWithSigner);\n    insanceWithSigner.transfer(to, amountToTransfer).then(function (result) {\n      console.log(\"Transfer succeded!\" + result);\n    }).catch(function (error) {\n      console.log(error);\n      setAlertProps(prevState => ({\n        alertProps: {\n          show: true,\n          field: amount\n        }\n      }));\n    });\n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Form, {\n      className: \"form\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"center\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Send Tokens\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form.Row, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"account\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"To Address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            as: \"select\",\n            value: selectedAccount,\n            onChange: handleChange,\n            children: accounts.map(account => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: accounts.indexOf(account),\n              children: account\n            }, accounts.indexOf(account).toString(), false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"account\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Amount\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"number\",\n            value: amount,\n            onChange: handleAmount\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"transfer\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"center\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"primary\",\n            type: \"submit\",\n            children: \"Transfer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AlertFailed, {\n      props: alertProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Transfer, \"kz2N9Dkyv8wy5rdCgUlAJWMDbTA=\");\n\n_c = Transfer;\n;\nexport default Transfer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Transfer\");","map":{"version":3,"sources":["/Users/ibrahimacamara/Projects/Blockchain/DecentralizedExchange/dex-app/src/services/Transfer.js"],"names":["React","useState","useEffect","Form","Button","ethers","provider","EthereumConnexion","AlertFailed","Transfer","accounts","setAccounts","selectedAccount","setSelectedAccount","amount","setAmount","alertProps","setAlertProps","listAccounts","then","result","console","log","prevState","show","field","catch","error","handleChange","event","target","value","handleAmount","handleSubmit","preventDefault","amountToTransfer","utils","parseEther","to","CreateInstances","insanceWithSigner","GetInsanceWithSigner","transfer","map","account","indexOf","toString"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport { ethers } from \"ethers\";\nimport provider from '../services/provider';\nimport EthereumConnexion from '../services/EthereumConnexion';\nimport AlertFailed from './AlertFailed';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../App.css';\n\nfunction Transfer() {\n\n    const [accounts, setAccounts] = useState([]);\n    const [selectedAccount, setSelectedAccount] = useState('');\n    const [amount, setAmount] = useState(0);\n    const [alertProps, setAlertProps] = useState({});\n\n    useEffect(() => {\n        provider.listAccounts().then(function (result) {\n            console.log(result);\n            setAccounts(result);\n            setSelectedAccount(accounts[0]);\n\n            setAlertProps(prevState => ({\n                alertProps: {\n                    show: false,\n                    ...prevState.field\n                }\n            }));\n        }).catch(function (error) {\n            console.log(error);\n        });\n    }, []);\n\n    function handleChange(event) {\n        setSelectedAccount(event.target.value);\n    };\n\n    function handleAmount(event) {\n        setAmount(event.target.value);\n    };\n\n    function handleSubmit(event) {\n\n        event.preventDefault();\n\n        // if (parseFloat(amount) <= 0) {\n        //     window.alert(\"Amount is not corect!\")\n        //     return;\n        // }\n\n        const amountToTransfer = ethers.utils.parseEther(amount);// * (10 ** 18); \n        console.log(amountToTransfer);\n\n        console.log(\"Request tranfer. To: \" + accounts[selectedAccount] + \", Amount: \" + amount);\n\n        const to = accounts[selectedAccount];\n\n        EthereumConnexion.CreateInstances();\n        const insanceWithSigner = EthereumConnexion.GetInsanceWithSigner();\n\n        console.log(insanceWithSigner);\n\n        insanceWithSigner.transfer(to, amountToTransfer)\n            .then(function (result) {\n                console.log(\"Transfer succeded!\" + result);\n               \n            }).catch(function (error) {\n                console.log(error);\n\n                setAlertProps(prevState => ({\n                alertProps: {\n                    show: true,\n                    field: amount\n                }\n            }));\n            });\n\n    };\n    return (\n        <>\n            <Form className=\"form\" onSubmit={handleSubmit}>\n                <div className=\"center\">\n                    <h3>Send Tokens</h3>\n                </div>\n                <Form.Row>\n                    <Form.Group className=\"account\">\n                        <Form.Label>To Address</Form.Label>\n                        <Form.Control as=\"select\" value={selectedAccount} onChange={handleChange}>\n                            {accounts.map((account) => (\n                                <option key={accounts.indexOf(account).toString()} value={accounts.indexOf(account)}>{account}</option>\n                            ))}\n                        </Form.Control>\n                    </Form.Group>\n                    <Form.Group className=\"account\">\n                        <Form.Label>Amount</Form.Label>\n                        <Form.Control type=\"number\" value={amount} onChange={handleAmount} />\n                    </Form.Group>\n                </Form.Row>\n                <Form.Group className=\"transfer\">\n                    <div className=\"center\">\n                        <Button variant=\"primary\" type=\"submit\">\n                            Transfer\n                    </Button>\n                    </div>\n                </Form.Group>\n            </Form>\n            <AlertFailed props={alertProps}></AlertFailed>\n        </>\n    );\n};\n\nexport default Transfer;"]},"metadata":{},"sourceType":"module"}