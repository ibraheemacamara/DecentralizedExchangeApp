[{"/Users/ibrahimacamara/Projects/Blockchain/DecentralizedExchange/dex-app/src/index.js":"1","/Users/ibrahimacamara/Projects/Blockchain/DecentralizedExchange/dex-app/src/App.js":"2","/Users/ibrahimacamara/Projects/Blockchain/DecentralizedExchange/dex-app/src/reportWebVitals.js":"3","/Users/ibrahimacamara/Projects/Blockchain/DecentralizedExchange/dex-app/src/services/EthereumConnexion.js":"4","/Users/ibrahimacamara/Projects/Blockchain/DecentralizedExchange/dex-app/src/services/provider.js":"5","/Users/ibrahimacamara/Projects/Blockchain/DecentralizedExchange/dex-app/src/components/Account.js":"6","/Users/ibrahimacamara/Projects/Blockchain/DecentralizedExchange/dex-app/src/components/IkaCoin.js":"7","/Users/ibrahimacamara/Projects/Blockchain/DecentralizedExchange/dex-app/src/components/Transfer.js":"8","/Users/ibrahimacamara/Projects/Blockchain/DecentralizedExchange/dex-app/src/components/AlertFailed.js":"9"},{"size":500,"mtime":1608927854560,"results":"10","hashOfConfig":"11"},{"size":633,"mtime":1613257189761,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1608927854562,"results":"13","hashOfConfig":"11"},{"size":9356,"mtime":1612693989241,"results":"14","hashOfConfig":"11"},{"size":183,"mtime":1611403207790,"results":"15","hashOfConfig":"11"},{"size":2453,"mtime":1613257152785,"results":"16","hashOfConfig":"11"},{"size":1511,"mtime":1613257155597,"results":"17","hashOfConfig":"11"},{"size":4206,"mtime":1613257097843,"results":"18","hashOfConfig":"11"},{"size":597,"mtime":1613257097842,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"mdaqqd",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"/Users/ibrahimacamara/Projects/Blockchain/DecentralizedExchange/dex-app/src/index.js",[],["44","45"],"/Users/ibrahimacamara/Projects/Blockchain/DecentralizedExchange/dex-app/src/App.js",[],"/Users/ibrahimacamara/Projects/Blockchain/DecentralizedExchange/dex-app/src/reportWebVitals.js",[],"/Users/ibrahimacamara/Projects/Blockchain/DecentralizedExchange/dex-app/src/services/EthereumConnexion.js",["46"],"import { ethers } from \"ethers\";\nimport provider from './provider';\n\nlet tokenInstance;\nlet tokenInstanceWithSigner;\nlet contractAddress = '0x6954579a3dBe6737897B00007CC5cC3cd84f9ec7';\nlet abi = [\n    {\n        \"inputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"constructor\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": true,\n                \"internalType\": \"address\",\n                \"name\": \"owner\",\n                \"type\": \"address\"\n            },\n            {\n                \"indexed\": true,\n                \"internalType\": \"address\",\n                \"name\": \"spender\",\n                \"type\": \"address\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"uint256\",\n                \"name\": \"value\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"Approval\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": true,\n                \"internalType\": \"address\",\n                \"name\": \"from\",\n                \"type\": \"address\"\n            },\n            {\n                \"indexed\": true,\n                \"internalType\": \"address\",\n                \"name\": \"to\",\n                \"type\": \"address\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"uint256\",\n                \"name\": \"value\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"Transfer\",\n        \"type\": \"event\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"owner\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"address\",\n                \"name\": \"spender\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"allowance\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\",\n        \"constant\": true\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"spender\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"amount\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"approve\",\n        \"outputs\": [\n            {\n                \"internalType\": \"bool\",\n                \"name\": \"\",\n                \"type\": \"bool\"\n            }\n        ],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"account\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"balanceOf\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\",\n        \"constant\": true\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"decimals\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint8\",\n                \"name\": \"\",\n                \"type\": \"uint8\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\",\n        \"constant\": true\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"spender\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"subtractedValue\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"decreaseAllowance\",\n        \"outputs\": [\n            {\n                \"internalType\": \"bool\",\n                \"name\": \"\",\n                \"type\": \"bool\"\n            }\n        ],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"spender\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"addedValue\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"increaseAllowance\",\n        \"outputs\": [\n            {\n                \"internalType\": \"bool\",\n                \"name\": \"\",\n                \"type\": \"bool\"\n            }\n        ],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"name\",\n        \"outputs\": [\n            {\n                \"internalType\": \"string\",\n                \"name\": \"\",\n                \"type\": \"string\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\",\n        \"constant\": true\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"symbol\",\n        \"outputs\": [\n            {\n                \"internalType\": \"string\",\n                \"name\": \"\",\n                \"type\": \"string\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\",\n        \"constant\": true\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"totalSupply\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\",\n        \"constant\": true\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"recipient\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"amount\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"transfer\",\n        \"outputs\": [\n            {\n                \"internalType\": \"bool\",\n                \"name\": \"\",\n                \"type\": \"bool\"\n            }\n        ],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"sender\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"address\",\n                \"name\": \"recipient\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"amount\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"transferFrom\",\n        \"outputs\": [\n            {\n                \"internalType\": \"bool\",\n                \"name\": \"\",\n                \"type\": \"bool\"\n            }\n        ],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    }\n];\n\nclass EthereumConnexion {\n    Insance = undefined;\n    InsanceWithSigner = undefined;\n\n    static CreateInstances(){\n        if (EthereumConnexion.Insance === undefined) {\n            EthereumConnexion.Insance = new ethers.Contract(contractAddress, abi, provider);\n\n            if (tokenInstanceWithSigner === undefined){\n                const signer = provider.getSigner();\n                EthereumConnexion.InsanceWithSigner = EthereumConnexion.Insance.connect(signer);\n            }\n        }\n    }\n\n    static GetInstance(){\n        return EthereumConnexion.Insance;\n    }\n\n    static GetInsanceWithSigner(){\n        return EthereumConnexion.InsanceWithSigner;\n    }\n};\n\nexport default EthereumConnexion;\n\n// export function getInstance() {\n\n//     if (tokenInstance === undefined) {\n//         tokenInstance = new ethers.Contract(contractAddress, abi, provider);\n//     }\n\n//     return tokenInstance;\n// };\n\n// export function getInstanceWithSigner() {\n\n//     if (tokenInstanceWithSigner === undefined) {\n//         const instance =  getInstance();\n//         const signer = provider.getSigner();\n//         tokenInstanceWithSigner = instance.connect(signer);\n//     }\n\n//     return tokenInstanceWithSigner;\n// }\n\n//export default getInstance;\n\n// export function getAccounts() {\n//     provider.listAccounts().then(function(result){\n//         return result;\n//     }).catch(function(error){\n//         console.log(error);\n//     });\n// };\n\n// export function balanceOf(account) {\n\n//     getInstance();\n\n//     tokenInstance.balanceOf(account).then(function(result){\n//         return result;\n//     }).catch(function(error){\n//         console.log(error);\n//     });\n// };\n\n// export function getName() {\n\n//     getInstance();\n\n//     tokenInstance.name().then(function(result){\n//         console.log(result);\n//         return result;\n//     }).catch(function(error){\n//         console.log(error);\n//     });\n// };\n\n// export function getSymbol() {\n\n//     getInstance();\n\n//     tokenInstance.symbol().then(function(result){\n//         return result;\n//     }).catch(function(error){\n//         console.log(error);\n//     });\n// };\n\n// export function getTotalSupply() {\n\n//     getInstance();\n\n//     tokenInstance.totalSupply().then(function(result){\n//         return result;\n//     }).catch(function(error){\n//         console.log(error);\n//     });\n// };","/Users/ibrahimacamara/Projects/Blockchain/DecentralizedExchange/dex-app/src/services/provider.js",[],["47","48"],"/Users/ibrahimacamara/Projects/Blockchain/DecentralizedExchange/dex-app/src/components/Account.js",["49"],"import React, { useState, useEffect } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport provider from '../services/provider';\nimport EthereumConnexion from '../services/EthereumConnexion';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../App.css';\n\nfunction Account() {\n\n    const [accounts, setAccounts] = useState([]);\n    //const [selectedAccount, setSelectedAccount] = useState();\n    const [balance, setBalance] = useState(1000);\n\n    let selectedAccount;\n\n    useEffect(() => {\n        provider.listAccounts().then(function (result) {\n            console.log(result);\n            setAccounts(result);\n            console.log(selectedAccount);\n        }).catch(function (error) {\n            console.log(error);\n        });\n        selectedAccount = 0;\n        setBalance(1000);\n    }, []);\n\n    function handleChange(event) {\n\n        selectedAccount = event.target.value;\n\n        return CheckBalance();\n    };\n\n    function CheckBalance() {\n\n        console.log(\"Checking balance of account: \" + accounts[selectedAccount]);\n\n        console.log(selectedAccount);\n\n        EthereumConnexion.CreateInstances();\n        const tokenInstance = EthereumConnexion.GetInstance();\n\n        tokenInstance.balanceOf(accounts[selectedAccount]).then(function (result) {\n            console.log(\"Received: \" + result);\n            const res = parseFloat(result.toString()) / 10 ** 18;\n            console.log(res);\n            setBalance(res);\n            console.log(\"After set balance: \"+balance)\n        }).catch(function (error) {\n            console.log(error);\n        });\n    };\n\n    return (\n        <Form>\n            <Form.Row>\n                <Form.Group className=\"account\">\n                    <Form.Label>Select an account: </Form.Label>\n                    <Form.Control as=\"select\" value={selectedAccount} onChange={handleChange}>\n                        {accounts.map((account) => (\n                            <option key={accounts.indexOf(account).toString()} value={accounts.indexOf(account)}>{account}</option>\n                        ))}\n                    </Form.Control>\n                </Form.Group>\n                <Form.Group className=\"account\">\n                    <Form.Label>Current account's balance:</Form.Label>\n                    <Form.Control type=\"text\" placeholder={balance+\" IKC\"} readOnly/>\n                </Form.Group>\n            </Form.Row>\n        </Form>\n    );\n};\n\nexport default Account;","/Users/ibrahimacamara/Projects/Blockchain/DecentralizedExchange/dex-app/src/components/IkaCoin.js",["50"],"import React, { useState, useEffect } from 'react';\nimport EthereumConnexion from '../services/EthereumConnexion';\nimport logo from '../assets/logo.png';\n\nimport '../App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction IkaCoin() {\n\n    const [name, setName] = useState(\"\");\n    const [symbol, setSymbol] = useState(\"\");\n    const [totalSupply, setTotalSupply] = useState(0);\n\n    useEffect(() => {\n\n        EthereumConnexion.CreateInstances();\n        const tokenInstance = EthereumConnexion.GetInstance();\n\n        tokenInstance.name().then(function (result) {\n            setName(result);\n        }).catch(function (error) {\n            console.log(error);\n        });\n\n        tokenInstance.symbol().then(function (result) {\n            setSymbol(result);\n        }).catch(function (error) {\n            console.log(error);\n        });\n\n        tokenInstance.totalSupply().then(function (result) {\n            let supp = parseFloat(result.toString()) / 10 ** 18;\n            setTotalSupply(supp);\n        }).catch(function (error) {\n            console.log(error);\n        });\n\n    }, []);\n\n    return (\n        <>\n            <div className=\"center\" >\n                <img className=\"logo\" src={logo} />\n            </div>\n            <div className=\"infos-name\">\n                <h5><b>{name}</b></h5>\n            </div>\n            <div className=\"infos-supply\">\n                <h5>Total Supply: {totalSupply} {symbol}</h5>\n            </div>\n        </>\n    );\n};\n\nexport default IkaCoin;\n","/Users/ibrahimacamara/Projects/Blockchain/DecentralizedExchange/dex-app/src/components/Transfer.js",["51","52"],"import React, { useState, useEffect } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Alert from 'react-bootstrap/Alert';\nimport { ethers } from \"ethers\";\nimport provider from '../services/provider';\nimport EthereumConnexion from '../services/EthereumConnexion';\nimport AlertFailed from './AlertFailed';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../App.css';\n\nfunction Transfer() {\n\n    const [accounts, setAccounts] = useState([]);\n    const [selectedAccount, setSelectedAccount] = useState('');\n    const [amount, setAmount] = useState(0);\n    const [showFailure, setShowFailure] = useState(false);\n    const [showSuccess, setShowSuccess] = useState(false);\n\n    useEffect(() => {\n        provider.listAccounts().then(function (result) {\n            console.log(result);\n            setAccounts(result);\n            setSelectedAccount(accounts[0]);\n\n        }).catch(function (error) {\n            console.log(error);\n        });\n    }, []);\n\n    function handleChange(event) {\n        setSelectedAccount(event.target.value);\n    };\n\n    function handleAmount(event) {\n        setAmount(event.target.value);\n    };\n\n    function handleSubmit(event) {\n\n        event.preventDefault();\n\n        // if (parseFloat(amount) <= 0) {\n        //     window.alert(\"Amount is not corect!\")\n        //     return;\n        // }\n\n        const amountToTransfer = ethers.utils.parseEther(amount);// * (10 ** 18); \n        console.log(amountToTransfer);\n\n        console.log(\"Request tranfer. To: \" + accounts[selectedAccount] + \", Amount: \" + amount);\n\n        const to = accounts[selectedAccount];\n\n        EthereumConnexion.CreateInstances();\n        const insanceWithSigner = EthereumConnexion.GetInsanceWithSigner();\n\n        console.log(insanceWithSigner);\n\n        insanceWithSigner.transfer(to, amountToTransfer)\n            .then(function (result) {\n                console.log(\"Transfer succeded!\" + result);\n                setShowSuccess(true);\n            }).catch(function (error) {\n                console.log(error);\n                setShowFailure(true);\n            });\n\n    };\n    return (\n        <>\n            <Form className=\"form\" onSubmit={handleSubmit}>\n                <div className=\"center\">\n                    <h3>Send Tokens</h3>\n                </div>\n                <Form.Row>\n                    <Form.Group className=\"account\">\n                        <Form.Label>To Address</Form.Label>\n                        <Form.Control as=\"select\" value={selectedAccount} onChange={handleChange}>\n                            {accounts.map((account) => (\n                                <option key={accounts.indexOf(account).toString()} value={accounts.indexOf(account)}>{account}</option>\n                            ))}\n                        </Form.Control>\n                    </Form.Group>\n                    <Form.Group className=\"account\">\n                        <Form.Label>Amount</Form.Label>\n                        <Form.Control type=\"number\" value={amount} onChange={handleAmount} />\n                    </Form.Group>\n                </Form.Row>\n                <Form.Group className=\"transfer\">\n                    <div className=\"center\">\n                        <Button variant=\"primary\" type=\"submit\">\n                            Transfer\n                    </Button>\n                    </div>\n                </Form.Group>\n            </Form>\n            {\n                showFailure && \n                <Alert variant=\"danger\" onClose={() => setShowFailure(false)} dismissible>\n                    <Alert.Heading>Something went wrong!</Alert.Heading>\n                    <p>\n                        The amount is not correct.\n                    </p>\n                </Alert>\n            }\n            {\n                showSuccess && \n                <Alert variant=\"primary\" onClose={() => setShowSuccess(false)} dismissible>\n                    <Alert.Heading>Transfer succesful!</Alert.Heading>\n                    <p>\n                        The amount is succesfully transfered.\n                    </p>\n                </Alert>\n            }\n        </>\n    );\n};\n\nexport default Transfer;","/Users/ibrahimacamara/Projects/Blockchain/DecentralizedExchange/dex-app/src/components/AlertFailed.js",[],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":4,"column":5,"nodeType":"59","messageId":"60","endLine":4,"endColumn":18},{"ruleId":"53","replacedBy":"61"},{"ruleId":"55","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":25,"column":27,"nodeType":"65","endLine":25,"endColumn":28},{"ruleId":"66","severity":1,"message":"67","line":43,"column":17,"nodeType":"68","endLine":43,"endColumn":52},{"ruleId":"57","severity":1,"message":"69","line":8,"column":8,"nodeType":"59","messageId":"60","endLine":8,"endColumn":19},{"ruleId":"63","severity":1,"message":"70","line":30,"column":8,"nodeType":"71","endLine":30,"endColumn":10,"suggestions":"72"},"no-native-reassign",["73"],"no-negated-in-lhs",["74"],"no-unused-vars","'tokenInstance' is defined but never used.","Identifier","unusedVar",["73"],["74"],"react-hooks/exhaustive-deps","Assignments to the 'selectedAccount' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'AlertFailed' is defined but never used.","React Hook useEffect has a missing dependency: 'accounts'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setSelectedAccount' needs the current value of 'accounts'.","ArrayExpression",["75"],"no-global-assign","no-unsafe-negation",{"desc":"76","fix":"77"},"Update the dependencies array to be: [accounts]",{"range":"78","text":"79"},[1012,1014],"[accounts]"]